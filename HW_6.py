# 1. Известно, что генеральная совокупность распределена нормально
# со средним квадратическим отклонением, равным 16.
# Найти доверительный интервал для оценки математического ожидания a с надежностью 0.95,
# если выборочная средняя M = 80, а объем выборки n = 256.
import numpy as np

a = 80 - 1.96 * 16 / 256 ** (1 / 2)
b = 80 + 1.96 * 16 / 256 ** (1 / 2)
print(f'Задача 1.\n'
      f'Доверительный интервал для оценки мат. лжидания: [{a};{b}].\n')

# 2. В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью,
# получены опытные данные: 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
# Предполагая, что результаты измерений подчинены нормальному закону распределения вероятностей,
# оценить истинное значение величины X при помощи доверительного интервала, покрывающего это
# значение с доверительной вероятностью 0,95.

arr = np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
print(f'Задача 2. Среднее: {np.mean(arr): .2f},\n'
      f'Размер выборки n = {len(arr)},\n'
      f'Среднее квадратическое отклонение: {np.std(arr, ddof=1): .2f}.'
      )
import scipy.stats as stats


def t_from_table(confidens, len_array):
    a = (1 - confidens)
    return stats.t.ppf(1 - a / 2, len_array - 1)


print(
    f'Табличное значение t-критерия: {t_from_table(0.95, len(arr)): .3f}')


def confidens_int(arr, confidens):
    return round(np.mean(arr) - t_from_table(confidens, len(arr)) * np.std(arr, ddof=1) / len(arr) ** 0.5, 3), \
           round(np.mean(arr) + t_from_table(confidens, len(arr)) * np.std(arr, ddof=1) / len(arr) ** 0.5, 3)


print(f'95%-й доверительный интервал для истинного значения Х: {confidens_int(arr, 0.95)}.\n')


# 3. Рост дочерей 175, 167, 154, 174, 178, 148, 160, 167, 169, 170
# Рост матерей 178, 165, 165, 173, 168, 155, 160, 164, 178, 175
# Используя эти данные построить 95% доверительный интервал для разности среднего роста родителей и детей.

daughter = np.array([175, 167, 154, 174, 178, 148, 160, 167, 169, 170])
mother = np.array([178, 165, 165, 173, 168, 155, 160, 164, 178, 175])
delta = np.mean(daughter) - np.mean(mother)
disp = (np.var(daughter, ddof=1) + np.var(mother, ddof=1)) / 2
se = np.sqrt (disp / 10 + disp / 10)

print(f'Задача 3. \n'
      f'Среднее арифметическое для выборки дочерей: {np.mean(daughter): .2f},\n'
      f'Среднее арифметическое для выборки матерей: {np.mean(mother): .2f},\n'
      f'Разность средних: {delta: .1f},\n'
      f'\n'
      f'Несмещенная дисперсия для вборки дочерей: {np.var(daughter, ddof=1): .2f},\n'
      f'Несмещенная дисперсия для вборки матерей: {np.var(mother, ddof=1): .2f},\n'
      f'Объединенная оценка дисперсии: {disp: .2f},\n'
      f'\n'
      f'Стандартная ошибка разности средних: {se: .2f},\n'
      f'\n')

import scipy.stats as stats
t = stats.t.ppf(0.95, 18)
d = delta - t * se
u = delta + t *se

print(f'Критерий Стьюдента: {t: .2f},\n'
      f'Доверительный интервал: ({d: .2f};{u: .2f})')




